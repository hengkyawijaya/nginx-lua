lua_shared_dict ip_whitelist 1m;

init_by_lua_block {
  local ip_whitelist = ngx.shared.ip_whitelist
  ip_whitelist:set("last_update_time", nil)
}

server {
  listen       80;
  server_name  localhost;

  location = /ip_whitelist_db {
    internal;
    proxy_pass_request_headers off;
    proxy_set_header Content-Type "application/json";
    proxy_set_header Accept "application/json";
    proxy_pass http://host.docker.internal:9002/internal/ip-whitelist;
    proxy_ssl_verify on;
  }

  location = /ip_whitelist_file {
    internal;
    default_type "text/html";
    alias /etc/nginx/conf.d/whitelist_ip_file;
  }

  location /api {
    rewrite_by_lua_block {
      local ip  = ngx.var.remote_addr
      local cache_ttl = 10 -- in second
      local ip_whitelist = ngx.shared.ip_whitelist
      local last_update_time  = ip_whitelist:get("last_update_time")
      local ip_tobe_whitelist = ""

      -- init from file for the first time, just in case failure to get from service
      -- it will replace with response from service
      if last_update_time == nil then
        local res = ngx.location.capture('/ip_whitelist_file')
        if res.status == 200 then
          ip_tobe_whitelist = res.body
        end
      end

      -- get whitelist ip from service
      if last_update_time == nil or last_update_time < ( ngx.now() - cache_ttl ) then
        local res = ngx.location.capture('/ip_whitelist_db')
        if res.status == 200 then
          ip_tobe_whitelist = res.body
        else
          ngx.log(ngx.STDERR, "response api:" .. res.body .. " status:" .. res.status);
        end
      end

      if not(ip_tobe_whitelist == "") then
        ip_whitelist:flush_all();
        for ip in ip_tobe_whitelist:gmatch("([^,]+),?") do 
          ip_whitelist:set(ip, true);
        end
        ip_whitelist:set("last_update_time", ngx.now());
      end

      if not(ip_whitelist:get(ip)) then
        ngx.exit(ngx.HTTP_FORBIDDEN);
      end
    }

    rewrite /api/(.*) /$1  break;
    proxy_pass http://host.docker.internal:9002;
  }
}